{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","id","email","className","src","alt","CardList","robots","cardComponents","map","user","i","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","value","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","Header","nextProps","nextState","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.42222c3c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, id, email }) => {\n  return (\n    // dib: responsible with window width\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${id}?size=200x200`} alt='robots' />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  const cardComponents = robots.map((user, i) => {\n    return (\n      <Card\n        id={robots[i].id}\n        name={robots[i].name}\n        email={robots[i].email}\n        key={i}\n      />\n    );\n  });\n  return <div>{cardComponents}</div>;\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        aria-label='Search Robot'\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        value={searchfield}\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = props => {\n  return (\n    <div\n      style={{\n        // overflowY: Can scroll for only children component. It's like a box\n        // height: height of scroll component area\n        overflowY: 'scroll',\n        border: '5px solid black',\n        height: '500px'\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  // Check if app happened error\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oh no, it's an error</h1>;\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\n\nclass Header extends Component {\n  // To avoid render `header` again\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n  render() {\n    return (\n      <div>\n        <h1 className='f2'>RoboFriends</h1>\n      </div>\n    );\n  }\n}\nexport default Header;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n// import { robots } from './robots';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport { setSearchField, requestRobots } from '../actions';\nimport Header from '../components/Header';\n\nclass App extends Component {\n  // no need to use arrow function to bind due to react function\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    if (isPending) {\n      return <h1>Loading</h1>;\n    } else {\n      return (\n        <div className='tc'>\n          <Header />\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundry>\n              {/* CardList is `children` for Scroll (props.children)*/}\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    // XXXX: -> take as props to pass\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    // return function\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","/**\n|--------------------------------------------------\n| Be fire from `mapDispatchToProps`\n|--------------------------------------------------\n*/\n\nimport {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\n// normal redux way. returns object\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\n// redux-thunk way. returns function (Higher order function)\n// waiting promise returns\nexport const requestRobots = () => dispatch => {\n  // no payload due to no arg\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\n\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\n\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n};\n\n// state\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false\n      });\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport App from './containers/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\n// import 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}